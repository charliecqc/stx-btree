92a93,109
> 				typedef struct node {
> 					key_type key;
> 					value_type val;
> 					unsigned num_levels;
> 					markable_t next[1];
> 				} node_t;
> 
> 				struct sl_iter {
> 					node_t *next;
> 				};
> 
> 				typedef struct sl {
> 					node_t *head;
> 					const datatype_t *type;
> 					int high_water;	//max historic number of levels
> 				} skiplist_t ;
> 
101c118
< 					value_type slotvalue[leafslotmax];
---
> 					value_type slotdata[leafslotmax];
103,104c120
< 
< 					int slotused;
---
> 					const unsigned short slotused;
108c124
< 						: slotused(-1), prevleaf(NULL),nextleaf(NULL)
---
> 						: slotused(0), prevleaf(NULL),nextleaf(NULL)
114c130
< 						return (slotused == leafslotmax - 1);
---
> 						return (slotused == leafslotmax);
119,135d134
< 				typedef struct node {
< 					key_type key;
< 					value_type val;
< 					unsigned num_levels;
< 					markable_t next[1];
< 					leaf_t *leaf_ptr;
< 				} node_t;
< 
< 				struct sl_iter {
< 					node_t *next;
< 				};
< 
< 				typedef struct sl {
< 					node_t *head;
< 					const datatype_t *type;
< 					int high_water;	//max historic number of levels
< 				} skiplist_t ;
140c139
< 					//		int z = __buildin_ctz(r);
---
> 			//		int z = __buildin_ctz(r);
142,143c141,142
< 					//	int levels = (int)(z / 1.5);
< 					//		int levels = r % MAX_LEVELS;
---
> 				//	int levels = (int)(z / 1.5);
> 			//		int levels = r % MAX_LEVELS;
152,161d150
< 				// Allocate a new leaf node
< 				leaf_t *leaf_alloc() {
< 					size_t sz = sizeof(leaf_t);		
< 					leaf_t *item = static_cast<leaf_t *>(malloc(sz));
< 					memset(item, 0, sz);
< 					item->prevleaf = NULL;
< 					item->nextleaf = NULL;
< 					item->slotused = -1;
< 					return item;
< 				}
166c155
< 					node_t *item = static_cast<node_t *>(malloc(sz)); //todo use new memory allocator later
---
> 					node_t *item = static_cast<node_t *>(malloc(sz)); //use new memory allocator later
197c186
< 				//find the preds and succss of new node. n is the random level of the new node
---
> 
218d206
< 
256c244
< 							if (EXPECT_FALSE(item == NULL)) {
---
> 						if (EXPECT_FALSE(item == NULL)) {
258c246
< 								cout << "s3 find_preds: past the last item in the skiplist " << endl;
---
> 							cout << "s3 find_preds: past the last item in the skiplist " << endl;
260,261c248,249
< 								break;	
< 							}
---
> 							break;	
> 						}
263,264c251,252
< 							cout << "s4 find_preds: visiting item " << item << " next is  " << next << endl;
< 							cout << "s4 find_preds: key " << STRIP_MARK(item->key) << " val " << item->val << endl;
---
> 						cout << "s4 find_preds: visiting item " << item << " next is  " << next << endl;
> 						cout << "s4 find_preds: key " << STRIP_MARK(item->key) << " val " << item->val << endl;
266,270c254,258
< 							if(EXPECT_TRUE(sl->type) == 0) {
< 								d = item->key - key;
< 							}else {
< 								d = sl->type->cmp(reinterpret_cast<void *>(item->key), reinterpret_cast<void *>(key));
< 							}
---
> 						if(EXPECT_TRUE(sl->type) == 0) {
> 							d = item->key - key;
> 						}else {
> 							d = sl->type->cmp(reinterpret_cast<void *>(item->key), reinterpret_cast<void *>(key));
> 						}
272,275c260,263
< 							if(d > 0)
< 								break;
< 							if (d == 0 && unlink != FORCE_UNLINK)
< 								break;
---
> 						if(d > 0)
> 							break;
> 						if (d == 0 && unlink != FORCE_UNLINK)
> 							break;
277,279c265,267
< 							pred = item;
< 							item = GET_NODE(next);
< 						}
---
> 						pred = item;
> 						item = GET_NODE(next);
> 					}
281c269
< 						cout << "s3 find_preds: found pred " << pred << " next " << next << " level " << level << endl;
---
> 					cout << "s3 find_preds: found pred " << pred << " next " << next << endl;
283,289c271,276
< 						if(level < n) {
< 							if(preds != NULL) {
< 								preds[level] = pred;
< 							}
< 							if(succs != NULL) {
< 								succs[level] = item;
< 							}
---
> 					if(level < n) {
> 						if(preds != NULL) {
> 							preds[level] = pred;
> 						}
> 						if(succs != NULL) {
> 							succs[level] = item;
292,293c279,280
< 
< 					if (d == 0) {
---
> 				}
> 				if (d == 0) {
295c282
< 						cout << "s2 find_preds: found matching item " << item << " in skiplist, pred is " << pred << endl;
---
> 					cout << "s2 find_preds: found matching item " << item << " in skiplist, pred is " << pred << endl;
297,298c284,285
< 						return item;
< 					}
---
> 					return item;
> 				}
300c287
< 					cout << "s2 find_preds: found proper place for key " << key << " in skiplist, pred is " << pred << " returning null " << endl;
---
> 				cout << "s2 find_preds: found proper place for key " << key << " in skiplist, pred is " << pred << " returning null " << endl;
302c289
< 					return NULL;
---
> 				return NULL;
304c291
< 				}
---
> 		}
306c293
< 				value_type sl_lookup(skiplist_t *sl, key_type key) {
---
> 		value_type sl_lookup(skiplist_t *sl, key_type key) {
308c295
< 					cout << "s1 sl_lookup: searching for key " << key << " in skiplist " << sl << endl;
---
> 			cout << "s1 sl_lookup: searching for key " << key << " in skiplist " << sl << endl;
310c297
< 					node_t *item = find_preds(NULL, NULL, 0, sl, key, DONT_UNLINK);
---
> 			node_t *item = find_preds(NULL, NULL, 0, sl, key, DONT_UNLINK);
312,315c299,302
< 					// if we found an <item> matching the <key> return its value
< 					if(item != NULL) {
< 						value_type val = item->val;
< 						if(val != NULL) {
---
> 			// if we found an <item> matching the <key> return its value
> 			if(item != NULL) {
> 				value_type val = item->val;
> 				if(val != NULL) {
317c304
< 							cout << "s1 sl_lookup: found item " << item << " val " <<item->val <<endl;
---
> 					cout << "s1 sl_lookup: found item " << item << " val " <<item->val <<endl;
319,336c306
< 							return val;
< 						}
< 					}
< #ifdef DEBUG
< 					cout << "s1 sl_lookup: no item in the skiplist matched the key " << endl; 
< #endif
< 					return NULL;
< 				}
< 
< 				key_type sl_min_key (skiplist_t *sl) {
< 					node_t *item = GET_NODE(sl->head->next[0]);
< 					while(item != NULL) {
< 						markable_t next = item->next[0];
< 						if(!HAS_MARK(next))
< 							return item->key;
< 						item = STRIP_MARK(next);
< 					}
< 					return NULL;
---
> 					return val;
338,342c308
< 
< 				value_type update_item(node_t *item, value_type expectation, value_type new_val) {
< 					value_type old_val = item->val;
< 					// if the item's value is NULL it means another thread removed the node out from under us
< 					if(EXPECT_FALSE(old_val == 0)) {
---
> 			}
344c310
< 						cout << "s2 update_item: lost a race to another thread removing the item, retry " << endl;
---
> 			cout << "s1 sl_lookup: no item in the skiplist matched the key " << endl; 
346,347c312,324
< 						return 0; //retry
< 					}
---
> 			return NULL;
> 		}
> 		
> 		key_type sl_min_key (skiplist_t *sl) {
> 			node_t *item = GET_NODE(sl->head->next[0]);
> 			while(item != NULL) {
> 				markable_t next = item->next[0];
> 				if(!HAS_MARK(next))
> 					return item->key;
> 				item = STRIP_MARK(next);
> 			}
> 			return NULL;
> 		}
349c326,329
< 					if(EXPECT_FALSE(expectation == CAS_EXPECT_DOES_NOT_EXIST)) {
---
> 		value_type update_item(node_t *item, value_type expectation, value_type new_val) {
> 			value_type old_val = item->val;
> 			// if the item's value is NULL it means another thread removed the node out from under us
> 			if(EXPECT_FALSE(old_val == 0)) {
351c331
< 						cout << "s1 update_item: the expectation was not met; the skiplist was not changed "<<endl;
---
> 				cout << "s2 update_item: lost a race to another thread removing the item, retry " << endl;
353,359c333,336
< 						return old_val;
< 					}
< 					// Use a CAS and not a SWAP. If the CAS fails it means another thread removed the node or updated its 
< 					// value. If another thread removed the node but it is not unlinked yet and we used a SWAP, we could 
< 					// replace DOES_NOT_EXIST with our value. Then another thread that is updating the value could think 
< 					// it succeeded and return return out value even though it should return DOES_NOT_EXIST
< 					if(old_val == SYNC_CAS(&item->val, old_val, new_val)) {
---
> 				return 0; //retry
> 			}
> 
> 			if(EXPECT_FALSE(expectation == CAS_EXPECT_DOES_NOT_EXIST)) {
361c338
< 						cout << "s1 update_item: the CAS succeeded.updated the value of the item "<<endl;
---
> 				cout << "s1 update_item: the expectation was not met; the skiplist was not changed "<<endl;
363,364c340,346
< 						return old_val; //success
< 					}
---
> 				return old_val;
> 			}
> 			// Use a CAS and not a SWAP. If the CAS fails it means another thread removed the node or updated its 
> 			// value. If another thread removed the node but it is not unlinked yet and we used a SWAP, we could 
> 			// replace DOES_NOT_EXIST with our value. Then another thread that is updating the value could think 
> 			// it succeeded and return return out value even though it should return DOES_NOT_EXIST
> 			if(old_val == SYNC_CAS(&item->val, old_val, new_val)) {
366c348
< 					cout << "s2 update_item: lost a race. the CAS failed. another thread chhhhanged the item's value'"<<endl;
---
> 				cout << "s1 update_item: the CAS succeeded.updated the value of the item "<<endl;
368,371c350,351
< 					return update_item(item, expectation, new_val); //tail call
< 				}
< 				//new version of insert. nodes in skiplist are used as indexing node, data will be stored separtely in data nodes. 
< 				value_type sl_insert(skiplist_t *sl, key_type key, value_type expectation, value_type new_val) {
---
> 				return old_val; //success
> 			}
373,374c353
< 					cout << " s1 sl_insert: key   " << key << " skiplist " << sl << endl;
< 					cout << " s1 sl_insert:expectation " << expectation << " new value " << new_val << endl;
---
> 			cout << "s2 update_item: lost a race. the CAS failed. another thread chhhhanged the item's value'"<<endl;
376,386c355,356
< 					node_t *preds[MAX_LEVELS];
< 					node_t *nexts[MAX_LEVELS];
< 					node_t *new_item = NULL;
< 					int n = random_levels(sl);
< 					node_t *old_item = find_preds(preds, nexts, n, sl, key, ASSIST_UNLINK);
< 
< 					//If there is already an item in the skiplist that matched the key just update its value
< 					if(old_item != NULL) {
< 						value_type ret_val = update_item(old_item, expectation, new_val);
< 						if(ret_val != 0)
< 							return ret_val;
---
> 			return update_item(item, expectation, new_val); //tail call
> 		}
388,392c358
< 						//If we lose a race with a thread removing the item we tried to update then we haveto retty
< 						return sl_insert(sl, key, expectation, new_val); //tail call
< 					}
< 					//it old_item == NULL, check whether nexts[0] exists. next[0] is the lower_bound of key
< 					if(EXPECT_FALSE(expectation != CAS_EXPECT_DOES_NOT_EXIST && expectation != CAS_EXPECT_WHATEVER)) {
---
> 		value_type sl_cas(skiplist_t *sl, key_type key, value_type expectation, value_type new_val) {
394c360,361
< 						cout << " s1 sl_insert: the expectation was not met, the skiplist was not changed " << endl;
---
> 			cout << " s1 sl_cas: key   " << key << " skiplist " << sl << endl;
> 			cout << " s1 sl_cas:expectation " << expectation << " new value " << new_val << endl;
396,397c363,367
< 						return 0;
< 					}
---
> 			node_t *preds[MAX_LEVELS];
> 			node_t *nexts[MAX_LEVELS];
> 			node_t *new_item = NULL;
> 			int n = random_levels(sl);
> 			node_t *old_item = find_preds(preds, nexts, n, sl, key, ASSIST_UNLINK);
399,401c369,381
< 					if(nexts[0]) {
< #ifdef DEBUG_CLONE
< 						cout << " s3 sl_insert: index node exists" << nexts[0]  << " key is " << nexts[0]->key << endl;
---
> 			//If there is already an item in the skuolist that matched the key just update its value
> 			if(old_item != NULL) {
> 				value_type ret_val = update_item(old_item, expectation, new_val);
> 				if(ret_val != 0)
> 					return ret_val;
> 
> 				//If we lose a race with a thread removing the item we tried to update then we haveto retty
> 				return sl_cas(sl, key, expectation, new_val); //tail call
> 			}
> 
> 			if(EXPECT_FALSE(expectation != CAS_EXPECT_DOES_NOT_EXIST && expectation != CAS_EXPECT_WHATEVER)) {
> #ifdef DEBUG
> 				cout << " s1 sl_cas: the expectation was not met, the skiplist was not changed " << endl;
403,412c383,385
< 						leaf_t *leaf = nexts[0]->leaf_ptr;
< 						markable_t index = SYNC_ADD(&leaf->slotused,1);
< 						if(index != leafslotmax - 1) {
< 							leaf->slotkey[index] = key;
< 							leaf->slotvalue[index] = new_val;
< 						}else {
< 							//split
< 						}
< 					} else {
< 						//Create a new index node and insert it into the skiplist
---
> 				return 0;
> 			}
> 			//Create a new node and insert it into the skiplist
414c387
< 						cout << " s3 sl_insert: attempting to insert a new item between " << preds[0] << " and " << nexts[0]  << endl;
---
> 			cout << " s3 sl_cas: attempting to insert a new item between " << preds[0] << " and " << nexts[0] << endl;
416,426c389,390
< 						//nexts is null and need allocate new leaf node and index node
< 						//Allocate a new leaf node. Right now i just allocate the leaf when is is necessary. 
< 						//todo: leaf pool
< 						leaf_t *leaf = leaf_alloc();
< 						//Use SYNC_CAS to implemente concurrent array access
< 						//if leaf->slotused == index ---> no other threads access it concurrently.
< 						markable_t index = SYNC_ADD(&leaf->slotused, 1);	
< 						if(index != leafslotmax - 1) {
< 							leaf->slotkey[index] = key;
< 							leaf->slotvalue[index] = new_val;
< 						}else { //not possible?
---
> 			key_type new_key = sl->type == NULL ? key : reinterpret_cast<key_type>(sl->type->clone(reinterpret_cast<void *>(key)));
> 			new_item = node_alloc(n, new_key, new_val);
428,458c392,400
< 						}
< 						//allocate a new skiplist node
< 						key_type new_key = sl->type == NULL ? key : reinterpret_cast<key_type>(sl->type->clone(reinterpret_cast<void *>(key)));
< 						new_item = node_alloc(n, new_key, new_val);
< 
< 						//set the leaf into new_item
< 						new_item->leaf_ptr = leaf;
< 
< 						//Set <new_item> into <sl> from the bottom level up. After <>;
< 						markable_t next = new_item->next[0] = reinterpret_cast<markable_t>(nexts[0]);
< 						for(int level = 1; level < new_item->num_levels;  ++level) {
< 							new_item->next[level] = reinterpret_cast<markable_t>(nexts[level]);	
< 						}
< 						//Link <new）item> into <sl> from the bottom level up. After <new_item> is insert into the bottom level			   //it is officially part of the skiplist 
< 						node_t *pred = preds[0];
< 						markable_t other = SYNC_CAS(&pred->next[0], next, reinterpret_cast<markable_t>(new_item));
< 						if(other != next) {
< #ifdef DEBUG
< 							cout <<"s3 sl_insert: failed to change pred's link: expected " << next << " found " << other << endl;
< #endif
< 							//Lost a race to another thread modifying the skiplist. Free the new item we allocated and retry
< 							if(sl->type != NULL) {
< 								free(reinterpret_cast<void *>(new_key));
< 							}
< 							free(new_item);
< 							return sl_insert(sl, key, expectation, new_val); //tail call
< 						}
< #ifdef DEBUG
< 						cout << "s3 sl_insert: successfully inserted a new item " << new_item << " at the bottom level " << endl;
< #endif
< 						for(int level = 1; level < new_item->num_levels; ++level) {
---
> 			//Set <new_item> into <sl> from the bottom level up. After <>;
> 			markable_t next = new_item->next[0] = reinterpret_cast<markable_t>(nexts[0]);
> 			for(int level = 1; level < new_item->num_levels;  ++level) {
> 				new_item->next[level] = reinterpret_cast<markable_t>(nexts[level]);	
> 			}
> 			//Link <new）item> into <sl> from the bottom level up. After <new_item> is insert into the bottom level			   //it is officially part of the skiplist 
> 			node_t *pred = preds[0];
> 			markable_t other = SYNC_CAS(&pred->next[0], next, reinterpret_cast<markable_t>(new_item));
> 			if(other != next) {
460c402
< 							cout << "s3 sl_insert: inserting the new item " << new_item << " at level " << level << endl;
---
> 				cout <<"s3 sl_cas: failed to change pred's link: expected " << next << " found " << other << endl;
462,466c404,410
< 							do {
< 								node_t * pred = preds[level];
< 								markable_t other = SYNC_CAS(&pred->next[level], (markable_t)nexts[level], (markable_t)new_item);
< 								if(other == (markable_t)nexts[level])
< 									break;
---
> 				//Lost a race to another thread modifying the skiplist. Free the new item we allocated and retry
> 				if(sl->type != NULL) {
> 					free(reinterpret_cast<void *>(new_key));
> 				}
> 				free(new_item);
> 				return sl_cas(sl, key, expectation, new_val); //tail call
> 			}
468c412
< 								cout << "s3 sl_insert: lost a race, failed to change pred's link. expected " << nexts[level] << " found " << other << endl;
---
> 			cout << "s3 sl_cas: successfully inserted a new item " << new_item << " at the bottom level " << endl;
470,479c414
< 								find_preds(preds, nexts, new_item->num_levels, sl, key, ASSIST_UNLINK);
< 
< 								for(int i = level; i < new_item->num_levels; ++i) {
< 									markable_t old_next = new_item->next[i];
< 									if(reinterpret_cast<markable_t>(nexts[i]) == old_next)
< 										continue;
< 
< 									///update <new_items>'s inconsistent next pointer before trying again. Use a CAS so if 
< 									//another thread is trying to remove the new item concurrently we do not stop on the mark
< 									//it places on the item 
---
> 			for(int level = 1; level < new_item->num_levels; ++level) {
481c416
< 									cout << "s3 sl_insert: attempting to update the new item's link from " << old_next << " to " << nexts[i] << endl;
---
> 				cout << "s3 sl_cas: inserting the new item " << new_item << " at level " << level << endl;
483,504c418,419
< 									other = SYNC_CAS(&new_item->next[i], old_next, reinterpret_cast<markable_t>(nexts[i]));
< 									//If another thread is removing this item we can stop linking it into to skiplist
< 									if(HAS_MARK(other)) {
< 										find_preds(NULL, NULL, 0, sl, key, FORCE_UNLINK);
< 										return 0;
< 									}
< 								}
< 							}while(1);
< 						}
< 
< 						// INn case another thread was in the process of remoiiving the <new_item> while we were added it. we 
< 						// have to make sure it is completely unlinked before we return. We might have lost a race and inserte
< 						// the new item at some level after the other thrad thought it was fully removed. That is a problem 
< 						// because oince a thread thinks it completely unlinks a node it queues it to be freed
< 						if(HAS_MARK(new_item->next[new_item->num_levels-1])) {
< 							find_preds(NULL, NULL, 0 , sl, key, FORCE_UNLINK);
< 						}
< 					} //else of nexts[0] does not exist
< 					return 0;
< 				}
< 
< 				value_type sl_cas(skiplist_t *sl, key_type key, value_type expectation, value_type new_val) {
---
> 				do {
> 					node_t * pred = preds[level];
506,507c421,424
< 					cout << " s1 sl_cas: key   " << key << " skiplist " << sl << endl;
< 					cout << " s1 sl_cas:expectation " << expectation << " new value " << new_val << endl;
---
> 					markable_t other = SYNC_CAS(&pred->next[level], (markable_t)nexts[level], (markable_t)new_item);
> 					if(other == (markable_t)nexts[level])
> 						break;
> 					cout << "s3 sl_cas: lost a race, failed to change pred's link. expected " << nexts[level] << " found " << other << endl;
509,519c426
< 					node_t *preds[MAX_LEVELS];
< 					node_t *nexts[MAX_LEVELS];
< 					node_t *new_item = NULL;
< 					int n = random_levels(sl);
< 					node_t *old_item = find_preds(preds, nexts, n, sl, key, ASSIST_UNLINK);
< 
< 					//If there is already an item in the skiplist that matched the key just update its value
< 					if(old_item != NULL) {
< 						value_type ret_val = update_item(old_item, expectation, new_val);
< 						if(ret_val != 0)
< 							return ret_val;
---
> 					find_preds(preds, nexts, new_item->num_levels, sl, key, ASSIST_UNLINK);
521,525c428,435
< 						//If we lose a race with a thread removing the item we tried to update then we haveto retty
< 						return sl_cas(sl, key, expectation, new_val); //tail call
< 					}
< 					//it old_item == NULL, preds[0]
< 					if(EXPECT_FALSE(expectation != CAS_EXPECT_DOES_NOT_EXIST && expectation != CAS_EXPECT_WHATEVER)) {
---
> 					for(int i = level; i < new_item->num_levels; ++i) {
> 						markable_t old_next = new_item->next[i];
> 						if(reinterpret_cast<markable_t>(nexts[i]) == old_next)
> 							continue;
> 						
> 						///update <new_items>'s inconsistent next pointer before trying again. Use a CAS so if 
> 						//another thread is trying to remove the new item concurrently we do not stop on the mark
> 						//it places on the item 
527c437
< 						cout << " s1 sl_cas: the expectation was not met, the skiplist was not changed " << endl;
---
> 						cout << "s3 sl_cas: attempting to update the new item's link from " << old_next << " to " << nexts[i] << endl;
529,553c439,443
< 						return 0;
< 					}
< 					//Create a new node and insert it into the skiplist
< #ifdef DEBUG_CLONE
< 					cout << " s3 sl_cas: attempting to insert a new item between " << preds[0] << " and " << nexts[0]  << " with  " << n << " levels "<<endl;
< #endif
< 					//allocate a new skiplist node
< 					key_type new_key = sl->type == NULL ? key : reinterpret_cast<key_type>(sl->type->clone(reinterpret_cast<void *>(key)));
< 					new_item = node_alloc(n, new_key, new_val);
< 
< 					//Set <new_item> into <sl> from the bottom level up. After <>;
< 					markable_t next = new_item->next[0] = reinterpret_cast<markable_t>(nexts[0]);
< 					for(int level = 1; level < new_item->num_levels;  ++level) {
< 						new_item->next[level] = reinterpret_cast<markable_t>(nexts[level]);	
< 					}
< 					//Link <new）item> into <sl> from the bottom level up. After <new_item> is insert into the bottom level			   //it is officially part of the skiplist 
< 					node_t *pred = preds[0];
< 					markable_t other = SYNC_CAS(&pred->next[0], next, reinterpret_cast<markable_t>(new_item));
< 					if(other != next) {
< #ifdef DEBUG
< 						cout <<"s3 sl_cas: failed to change pred's link: expected " << next << " found " << other << endl;
< #endif
< 						//Lost a race to another thread modifying the skiplist. Free the new item we allocated and retry
< 						if(sl->type != NULL) {
< 							free(reinterpret_cast<void *>(new_key));
---
> 						other = SYNC_CAS(&new_item->next[i], old_next, reinterpret_cast<markable_t>(nexts[i]));
> 						//If another thread is removing this item we can stop linking it into to skiplist
> 						if(HAS_MARK(other)) {
> 							find_preds(NULL, NULL, 0, sl, key, FORCE_UNLINK);
> 							return 0;
555,556d444
< 						free(new_item);
< 						return sl_cas(sl, key, expectation, new_val); //tail call
557a446,462
> 				}while(1);
> 			}
> 
> 			// INn case another thread was in the process of remoiiving the <new_item> while we were added it. we 
> 			// have to make sure it is completely unlinked before we return. We might have lost a race and inserte
> 			// the new item at some level after the other thrad thought it was fully removed. That is a problem 
> 			// because oince a thread thinks it completely unlinks a node it queues it to be freed
> 			if(HAS_MARK(new_item->next[new_item->num_levels-1])) {
> 				find_preds(NULL, NULL, 0 , sl, key, FORCE_UNLINK);
> 			}
> 			return 0;
> 		}
> 
> 		// Mark <item > at each level of <sl> from the top down. If multiple threads try to concurrently remove 
> 		// the same item only one of them should succeed. Marking the bottom level established which of them succe
> 		// ed.
> 		value_type sl_remove (skiplist_t *sl, key_type key) {
559c464
< 					cout << "s3 sl_cas: successfully inserted a new item " << new_item << " at the bottom level " << endl;
---
> 			cout << "s1 sl_remove: removing item with key " << key << " from skiplist " << sl << endl;
561c466,468
< 					for(int level = 1; level < new_item->num_levels; ++level) {
---
> 			node_t *preds[MAX_LEVELS];
> 			node_t *item = find_preds(preds, NULL, sl->high_water, sl, key, ASSIST_UNLINK);
> 			if(item == NULL) {
563c470
< 						cout << "s3 sl_cas: inserting the new item " << new_item << " at level " << level << endl;
---
> 				cout << "s3 sl_remove: remove failed, an item with a matching key does not exist in the skiplist" << endl;
565,566c472,482
< 						do {
< 							node_t * pred = preds[level];
---
> 				return NULL;
> 			}
> 
> 			// Mark <item> at each level of <sl> from the top down. if multiple threads try to concurrently remove
> 			// the same item only one of them should succeed. Marking the bottom level establishes which of 
> 			// them succeeds.
> 			markable_t old_next = 0;
> 			for (int level = item->num_levels - 1; level >= 0; --level) {
> 				markable_t next;
> 				old_next = item->next[level];
> 				do {
568,571c484
< 							markable_t other = SYNC_CAS(&pred->next[level], (markable_t)nexts[level], (markable_t)new_item);
< 							if(other == (markable_t)nexts[level])
< 								break;
< 							cout << "s3 sl_cas: lost a race, failed to change pred's link. expected " << nexts[level] << " found " << other << endl;
---
> 					cout << "s3 sl_remove: marking item at level " << level << "next " << old_next << endl;
573,582c486,488
< 							find_preds(preds, nexts, new_item->num_levels, sl, key, ASSIST_UNLINK);
< 
< 							for(int i = level; i < new_item->num_levels; ++i) {
< 								markable_t old_next = new_item->next[i];
< 								if(reinterpret_cast<markable_t>(nexts[i]) == old_next)
< 									continue;
< 
< 								///update <new_items>'s inconsistent next pointer before trying again. Use a CAS so if 
< 								//another thread is trying to remove the new item concurrently we do not stop on the mark
< 								//it places on the item 
---
> 					next = old_next;
> 					old_next = SYNC_CAS(&item->next[level], next, MARK_NODE(static_cast<node_t *>(next)));
> 					if(HAS_MARK(old_next)) {
584c490
< 								cout << "s3 sl_cas: attempting to update the new item's link from " << old_next << " to " << nexts[i] << endl;
---
> 						cout << " s2 sl_remove: " << item << " is already marked for remove by another thread next " << old_next << endl;
586,601c492,494
< 								other = SYNC_CAS(&new_item->next[i], old_next, reinterpret_cast<markable_t>(nexts[i]));
< 								//If another thread is removing this item we can stop linking it into to skiplist
< 								if(HAS_MARK(other)) {
< 									find_preds(NULL, NULL, 0, sl, key, FORCE_UNLINK);
< 									return 0;
< 								}
< 							}
< 						}while(1);
< 					}
< 
< 					// In case another thread was in the process of remoiiving the <new_item> while we were added it. we 
< 					// have to make sure it is completely unlinked before we return. We might have lost a race and inserte
< 					// the new item at some level after the other thrad thought it was fully removed. That is a problem 
< 					// because oince a thread thinks it completely unlinks a node it queues it to be freed
< 					if(HAS_MARK(new_item->next[new_item->num_levels-1])) {
< 						find_preds(NULL, NULL, 0 , sl, key, FORCE_UNLINK);
---
> 						if(level == 0)
> 							return NULL;
> 						break;
603,604c496,497
< 					return 0;
< 				}
---
> 				}while(next != old_next);
> 			}
606,615c499,501
< 				// Mark <item > at each level of <sl> from the top down. If multiple threads try to concurrently remove 
< 				// the same item only one of them should succeed. Marking the bottom level established which of them succe
< 				// ed.
< 				value_type sl_remove (skiplist_t *sl, key_type key) {
< #ifdef DEBUG
< 					cout << "s1 sl_remove: removing item with key " << key << " from skiplist " << sl << endl;
< #endif
< 					node_t *preds[MAX_LEVELS];
< 					node_t *item = find_preds(preds, NULL, sl->high_water, sl, key, ASSIST_UNLINK);
< 					if(item == NULL) {
---
> 			//Atomically swap out the item's value in case another thread is updating the item while we are 
> 			//removing it. This establishes which operation occurs first logically, the update or the remove.
> 			value_type val = SYNC_SWAP(&item->val, NULL);
617c503
< 						cout << "s3 sl_remove: remove failed, an item with a matching key does not exist in the skiplist" << endl;
---
> 			cout << " sw sl_remove: replaced item " << item << " 's value whit NULL " << endl;
619,620c505,506
< 						return NULL;
< 					}
---
> 			//unlink the item
> 			find_preds(NULL, NULL, 0, sl, key, FORCE_UNLINK);
622,644c508,512
< 					// Mark <item> at each level of <sl> from the top down. if multiple threads try to concurrently remove
< 					// the same item only one of them should succeed. Marking the bottom level establishes which of 
< 					// them succeeds.
< 					markable_t old_next = 0;
< 					for (int level = item->num_levels - 1; level >= 0; --level) {
< 						markable_t next;
< 						old_next = item->next[level];
< 						do {
< #ifdef DEBUG
< 							cout << "s3 sl_remove: marking item at level " << level << "next " << old_next << endl;
< #endif
< 							next = old_next;
< 							old_next = SYNC_CAS(&item->next[level], next, MARK_NODE(static_cast<node_t *>(next)));
< 							if(HAS_MARK(old_next)) {
< #ifdef DEBUG
< 								cout << " s2 sl_remove: " << item << " is already marked for remove by another thread next " << old_next << endl;
< #endif
< 								if(level == 0)
< 									return NULL;
< 								break;
< 							}
< 						}while(next != old_next);
< 					}
---
> 			//free the node
> 			if(sl->type !=NULL) {
> 				free(static_cast<void *>(item->key));	
> 			}
> 			free(item);
646,659c514,515
< 					//Atomically swap out the item's value in case another thread is updating the item while we are 
< 					//removing it. This establishes which operation occurs first logically, the update or the remove.
< 					value_type val = SYNC_SWAP(&item->val, NULL);
< #ifdef DEBUG
< 					cout << " sw sl_remove: replaced item " << item << " 's value whit NULL " << endl;
< #endif
< 					//unlink the item
< 					find_preds(NULL, NULL, 0, sl, key, FORCE_UNLINK);
< 
< 					//free the node
< 					if(sl->type !=NULL) {
< 						free(static_cast<void *>(item->key));	
< 					}
< 					free(item);
---
> 			return val;
> 		}
661,662c517,525
< 					return val;
< 				}
---
> 		sl_iter * sl_iter_begin(skiplist_t *sl, key_type key) {
> 			sl_iter *iter = static_cast<sl_iter *>(malloc(sizeof(sl_iter)));
> 			if(key != NULL) {
> 				find_preds(NULL, &iter->next, 1, sl, key ,DONT_UNLINK);
> 			}else {
> 				iter->next = GET_NODE(sl->head->next[0]);
> 			}
> 			return iter;
> 		}
664,672c527,535
< 				sl_iter * sl_iter_begin(skiplist_t *sl, key_type key) {
< 					sl_iter *iter = static_cast<sl_iter *>(malloc(sizeof(sl_iter)));
< 					if(key != NULL) {
< 						find_preds(NULL, &iter->next, 1, sl, key ,DONT_UNLINK);
< 					}else {
< 						iter->next = GET_NODE(sl->head->next[0]);
< 					}
< 					return iter;
< 				}
---
> 		value_type sl_iter_next(sl_iter *iter, key_type * key_ptr) {
> 			node_t *item = iter->next;
> 			while ( item != NULL && HAS_MARK(item->next[0])) {
> 				item = STRIP_MARK(item->next[0]);
> 			}
> 			if(item == NULL) {
> 				iter->next = NULL;
> 				return NULL;
> 			}
674,682c537,542
< 				value_type sl_iter_next(sl_iter *iter, key_type * key_ptr) {
< 					node_t *item = iter->next;
< 					while ( item != NULL && HAS_MARK(item->next[0])) {
< 						item = STRIP_MARK(item->next[0]);
< 					}
< 					if(item == NULL) {
< 						iter->next = NULL;
< 						return NULL;
< 					}
---
> 			iter->next = STRIP_MARK(item->next[0]);
> 			if ( key_ptr != NULL) {
> 				*key_ptr = item->key;
> 			}
> 			return item->val;
> 		}
684,693c544,546
< 					iter->next = STRIP_MARK(item->next[0]);
< 					if ( key_ptr != NULL) {
< 						*key_ptr = item->key;
< 					}
< 					return item->val;
< 				}
< 
< 				void sl_iter_free ( sl_iter *iter) {
< 					free(iter);
< 				}
---
> 		void sl_iter_free ( sl_iter *iter) {
> 			free(iter);
> 		}
725c578
< 		};
---
> 	};
